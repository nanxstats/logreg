[{"path":"https://nanx.me/logreg/articles/logreg.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Regularized Logistic Regressions with Computational Graphs","text":"logreg package implemented logistic regression regularized logistic regression models computational graph automatic differentiation framework provided R package cgraph. vignette, test methods implemented package: Logistic regression Logistic regression ridge penalty (\\(\\ell_2\\) regularization) Logistic regression seamless-\\(\\ell_0\\) (SELO) penalty (differentiable approximation \\(\\ell_0\\) regularization) also compare one existing method make sure data can fitted reasonable regularized logistic regression model: Logistic regression multi-step adaptive elastic-net (\\(\\ell_1\\)-\\(\\ell_2\\) based approximately non-convex regularization)","code":""},{"path":"https://nanx.me/logreg/articles/logreg.html","id":"generate-data","dir":"Articles","previous_headings":"","what":"Generate data","title":"Regularized Logistic Regressions with Computational Graphs","text":"Let’s simulate data testing high-dimensional linear models: Now 350 samples training set 150 test set; 500 variables first 5 true variables; Moderate correlations variables (rho = 0.5) moderate signal--noise ratio (snr = 2).","code":"library(\"logreg\") library(\"msaenet\") sim <- msaenet.sim.binomial(   n = 500, p = 500, rho = 0.5, coef = rnorm(5, sd = 5), snr = 2,   p.train = 0.7, seed = 2019 )"},{"path":"https://nanx.me/logreg/articles/logreg.html","id":"fit-the-models","dir":"Articles","previous_headings":"","what":"Fit the models","title":"Regularized Logistic Regressions with Computational Graphs","text":"Fit models training set:","code":"fit_base <- fit_logistic(x = sim$x.tr, y = sim$y.tr, n_epochs = 500) fit_ridge <- fit_logistic_ridge(x = sim$x.tr, y = sim$y.tr, n_epochs = 500, lambda = 0.5) fit_selo <- fit_logistic_selo(x = sim$x.tr, y = sim$y.tr, n_epochs = 500, tau = 0.05) fit_msaenet <- msaenet(sim$x.tr, sim$y.tr, family = \"binomial\", init = \"ridge\", tune = \"ebic\", nsteps = 10L, seed = 2009)"},{"path":"https://nanx.me/logreg/articles/logreg.html","id":"convergence","dir":"Articles","previous_headings":"","what":"Convergence","title":"Regularized Logistic Regressions with Computational Graphs","text":"Plot training errors vs. epochs:  ridge model converged around 100 epochs, much faster two models (vanilla SELO).","code":"par(mfrow = c(1, 3)) plot_error(fit_base) plot_error(fit_ridge) plot_error(fit_selo)"},{"path":"https://nanx.me/logreg/articles/logreg.html","id":"estimated-coefficients","dir":"Articles","previous_headings":"","what":"Estimated coefficients","title":"Regularized Logistic Regressions with Computational Graphs","text":"Let’s plot estimated coefficients see meet expectations. logistic regression got overall correct estimation true variables; variables got smaller coefficients:  ridge model, shrinkage effects observed sparsity induced, expected:  SELO model, can see shrinkage effect apparent sparsity estimation results. Note near-zero coefficients estimated precisely 0, due limitation unconstrained gradient-based optimization method.  multi-step adaptive elastic-net gave us model closest true model, 4 5 true variables estimated non-zero, others 0 (1 false negative):","code":"plot_coef(fit_base) plot_coef(fit_ridge) plot_coef(fit_selo) plot_coef(fit_msaenet)"},{"path":"https://nanx.me/logreg/articles/logreg.html","id":"predictive-performance","dir":"Articles","previous_headings":"","what":"Predictive performance","title":"Regularized Logistic Regressions with Computational Graphs","text":"Let’s compute AUC training test set. logistic regression model sets baseline, overfits training set: ridge model clearly overfits training set , 3% 4% AUC improvement test set compared baseline: SELO model overfits training set, almost 10% AUC improvement test set compared baseline: multi-step adaptive elastic-net model similar AUCs training set set set. 20% AUC improvement test set compared baseline:","code":"c(auc(sim$y.tr, predict(fit_base, sim$x.tr)), auc(sim$y.te, predict(fit_base, sim$x.te))) #> [1] 1.0000000 0.6626506 c(auc(sim$y.tr, predict(fit_ridge, sim$x.tr)), auc(sim$y.te, predict(fit_ridge, sim$x.te))) #> [1] 0.9923589 0.6951987 c(auc(sim$y.tr, predict(fit_selo, sim$x.tr)), auc(sim$y.te, predict(fit_selo, sim$x.te))) #> [1] 0.9912813 0.7574177 c(auc(sim$y.tr, predict(fit_msaenet, sim$x.tr)), auc(sim$y.te, predict(fit_msaenet, sim$x.te))) #> [1] 0.8928618 0.8730444"},{"path":"https://nanx.me/logreg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nan Xiao. Author, maintainer.","code":""},{"path":"https://nanx.me/logreg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Xiao N (2021). logreg: Regularized Logistic Regressions Computational Graphs. https://nanx./logreg/, https://github.com/nanxstats/logreg.","code":"@Manual{,   title = {logreg: Regularized Logistic Regressions with Computational Graphs},   author = {Nan Xiao},   year = {2021},   note = {https://nanx.me/logreg/, https://github.com/nanxstats/logreg}, }"},{"path":"https://nanx.me/logreg/index.html","id":"logreg-","dir":"","previous_headings":"","what":"Regularized Logistic Regressions with Computational Graphs","title":"Regularized Logistic Regressions with Computational Graphs","text":"Implements logistic regression regularized logistic regression models computational graph automatic differentiation framework provided R package cgraph. Check vignette blog post details.","code":""},{"path":"https://nanx.me/logreg/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Regularized Logistic Regressions with Computational Graphs","text":"Install GitHub:","code":"remotes::install_github(\"nanxstats/logreg\")"},{"path":"https://nanx.me/logreg/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Regularized Logistic Regressions with Computational Graphs","text":"logreg free open source software, licensed MIT.","code":""},{"path":"https://nanx.me/logreg/reference/auc.html","id":null,"dir":"Reference","previous_headings":"","what":"compute auc — auc","title":"compute auc — auc","text":"compute auc","code":""},{"path":"https://nanx.me/logreg/reference/auc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compute auc — auc","text":"","code":"auc(label, prob)"},{"path":"https://nanx.me/logreg/reference/auc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compute auc — auc","text":"label true label prob predicted probability","code":""},{"path":"https://nanx.me/logreg/reference/crossentropy.html","id":null,"dir":"Reference","previous_headings":"","what":"binary cross entropy — crossentropy","title":"binary cross entropy — crossentropy","text":"binary cross entropy","code":""},{"path":"https://nanx.me/logreg/reference/crossentropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"binary cross entropy — crossentropy","text":"","code":"crossentropy(y, p)"},{"path":"https://nanx.me/logreg/reference/crossentropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"binary cross entropy — crossentropy","text":"y true label (0/1) p predicted probability","code":""},{"path":"https://nanx.me/logreg/reference/crossentropy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"binary cross entropy — crossentropy","text":"-(y * log(p) + (1 - y) * log (1 - p))","code":""},{"path":"https://nanx.me/logreg/reference/fit_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"fit a logistic regression model — fit_logistic","title":"fit a logistic regression model — fit_logistic","text":"fit logistic regression model","code":""},{"path":"https://nanx.me/logreg/reference/fit_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fit a logistic regression model — fit_logistic","text":"","code":"fit_logistic(x, y, learning_rate = 0.05, n_epochs = 1)"},{"path":"https://nanx.me/logreg/reference/fit_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fit a logistic regression model — fit_logistic","text":"x predictor matrix (n x p) y response matrix (n x 1) learning_rate learning rate n_epochs number epoches","code":""},{"path":"https://nanx.me/logreg/reference/fit_logistic_ridge.html","id":null,"dir":"Reference","previous_headings":"","what":"fit a regularized logistic regression model (ridge penalty) — fit_logistic_ridge","title":"fit a regularized logistic regression model (ridge penalty) — fit_logistic_ridge","text":"fit regularized logistic regression model (ridge penalty)","code":""},{"path":"https://nanx.me/logreg/reference/fit_logistic_ridge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fit a regularized logistic regression model (ridge penalty) — fit_logistic_ridge","text":"","code":"fit_logistic_ridge(x, y, learning_rate = 0.05, n_epochs = 1, lambda = 1)"},{"path":"https://nanx.me/logreg/reference/fit_logistic_ridge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fit a regularized logistic regression model (ridge penalty) — fit_logistic_ridge","text":"x predictor matrix (n x p) y response matrix (n x 1) learning_rate learning rate n_epochs number epoches lambda regularization parameter","code":""},{"path":"https://nanx.me/logreg/reference/fit_logistic_selo.html","id":null,"dir":"Reference","previous_headings":"","what":"fit a regularized logistic regression model (SELO penalty) — fit_logistic_selo","title":"fit a regularized logistic regression model (SELO penalty) — fit_logistic_selo","text":"fit regularized logistic regression model (SELO penalty)","code":""},{"path":"https://nanx.me/logreg/reference/fit_logistic_selo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fit a regularized logistic regression model (SELO penalty) — fit_logistic_selo","text":"","code":"fit_logistic_selo(x, y, learning_rate = 0.05, n_epochs = 1, tau = 0.1)"},{"path":"https://nanx.me/logreg/reference/fit_logistic_selo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fit a regularized logistic regression model (SELO penalty) — fit_logistic_selo","text":"x predictor matrix (n x p) y response matrix (n x 1) learning_rate learning rate n_epochs number epoches tau regularization parameter","code":""},{"path":"https://nanx.me/logreg/reference/initialize_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"contant initializer — initialize_constant","title":"contant initializer — initialize_constant","text":"contant initializer","code":""},{"path":"https://nanx.me/logreg/reference/initialize_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"contant initializer — initialize_constant","text":"","code":"initialize_constant(value = 0)"},{"path":"https://nanx.me/logreg/reference/initialize_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"contant initializer — initialize_constant","text":"value contant value","code":""},{"path":"https://nanx.me/logreg/reference/initialize_glorot_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Glorot/Xavier normal initializer — initialize_glorot_normal","title":"Glorot/Xavier normal initializer — initialize_glorot_normal","text":"Glorot/Xavier normal initializer","code":""},{"path":"https://nanx.me/logreg/reference/initialize_glorot_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glorot/Xavier normal initializer — initialize_glorot_normal","text":"","code":"initialize_glorot_normal(fan_in, fan_out, seed = NULL)"},{"path":"https://nanx.me/logreg/reference/initialize_glorot_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glorot/Xavier normal initializer — initialize_glorot_normal","text":"fan_in number input elements fan_out number output elements seed random number seed","code":""},{"path":"https://nanx.me/logreg/reference/plot_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"plot estimated coefficients — plot_coef","title":"plot estimated coefficients — plot_coef","text":"plot estimated coefficients","code":""},{"path":"https://nanx.me/logreg/reference/plot_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot estimated coefficients — plot_coef","text":"","code":"plot_coef(x)"},{"path":"https://nanx.me/logreg/reference/plot_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot estimated coefficients — plot_coef","text":"x model object","code":""},{"path":"https://nanx.me/logreg/reference/plot_error.html","id":null,"dir":"Reference","previous_headings":"","what":"plot errors — plot_error","title":"plot errors — plot_error","text":"plot errors","code":""},{"path":"https://nanx.me/logreg/reference/plot_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot errors — plot_error","text":"","code":"plot_error(x)"},{"path":"https://nanx.me/logreg/reference/plot_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot errors — plot_error","text":"x model object","code":""},{"path":"https://nanx.me/logreg/reference/predict.logreg.html","id":null,"dir":"Reference","previous_headings":"","what":"make predictions from a fitted model — predict.logreg","title":"make predictions from a fitted model — predict.logreg","text":"make predictions fitted model","code":""},{"path":"https://nanx.me/logreg/reference/predict.logreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make predictions from a fitted model — predict.logreg","text":"","code":"# S3 method for logreg predict(object, newdata, ...)"},{"path":"https://nanx.me/logreg/reference/predict.logreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make predictions from a fitted model — predict.logreg","text":"object model object newdata new predictor matrix ... unused","code":""}]
